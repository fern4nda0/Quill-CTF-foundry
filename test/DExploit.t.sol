// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.17;

import "forge-std/Test.sol";
import "forge-std/console.sol";
import "../src/D31eg4t3/D31eg4t3.sol";
import "../src/D31eg4t3/DAttacker.sol";

contract DExploit is Test {
    address wojak;
    address manager;
    DAttacker internal dAttacker;
    D31eg4t3 internal dContract;

    function setUp() public {
        //Characters
        manager = makeAddr("manager");
        wojak = makeAddr("wojak");
        // Characters labelling...
        vm.label(manager, "bogdanOff");
        vm.label(wojak, "attacker");

        //Equity
        vm.deal(manager, 0.01 ether);
        vm.deal(wojak, 0.01 ether);

        vm.startPrank(manager);
        // owner is the boggy
        dContract = new D31eg4t3();
        vm.stopPrank();

        vm.startPrank(wojak);
        vm.expectRevert();
        dContract.hacked();
        vm.stopPrank();
    }

    function testExploit() public {
        vm.startPrank(wojak);
        dAttacker = new DAttacker();
        dAttacker.attack(address(dContract), address(wojak));
        // assertEq(canYouHackMe(address(wojak)), true);
        vm.stopPrank();
        assertEq(dContract.owner(), address(wojak));
    }
}
