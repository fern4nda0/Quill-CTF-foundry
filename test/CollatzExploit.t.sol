// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.17;

import "forge-std/Test.sol";
import "forge-std/console.sol";
import "../src/CollatzPuzzle/CollatzPuzzle.sol";

contract Factory {
    event Log(address addr);

    // Deploys a contract that always returns 42
    function deploy() external returns (address, uint256) {
        // bytes memory bytecode = hex"69602a60005260206000f3600052600a6016f3";
        bytes
            memory bytecode = hex"7f6002600435818106156015576003026001016017565b045b60005260206000f360005260206000f3";
        address addr;
        uint256 size;
        assembly {
            // create(value, offset, size)
            addr := create(0, add(bytecode, 0x20), 0x29)
            size := extcodesize(addr)
        }
        require(addr != address(0));

        emit Log(addr);
        return (addr, size);
    }
}

contract CollatzExploit is Test {
    address alice;
    address manager;
    Factory internal factory;
    CollatzPuzzle internal co;

    function setUp() public {
        //Characters
        manager = makeAddr("manager");
        alice = makeAddr("alice");
        //Equity
        vm.deal(manager, 0.01 ether);
        vm.deal(alice, 0.01 ether);
    }

    function testExploit() public {
        vm.startPrank(alice);
        co = new CollatzPuzzle();
        factory = new Factory();
        (address add, uint256 sizee) = factory.deploy();
        console.log("ADDRESS : %s ", add);
        console.log("Size : %s ", sizee);
        (, bytes memory data) = add.call(
            abi.encodeWithSignature("getMeaningOfLife()")
        );
        uint256 num = abi.decode(data, (uint256));
        console.log("DATA : %s", num);
        co.callMe(add);
        vm.stopPrank();
    }
}
